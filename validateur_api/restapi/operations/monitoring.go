// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"errors"
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// MonitoringHandlerFunc turns a function with the right signature into a monitoring handler
type MonitoringHandlerFunc func(MonitoringParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MonitoringHandlerFunc) Handle(params MonitoringParams) middleware.Responder {
	return fn(params)
}

// MonitoringHandler interface for that can handle valid monitoring params
type MonitoringHandler interface {
	Handle(MonitoringParams) middleware.Responder
}

// NewMonitoring creates a new http.Handler for the monitoring operation
func NewMonitoring(ctx *middleware.Context, handler MonitoringHandler) *Monitoring {
	return &Monitoring{Context: ctx, Handler: handler}
}

/*Monitoring swagger:route GET /sonde monitoring

Retourne un flag correspondant à la bonne connexion à un noeud Infura.

Retourne un flag correspondant à la bonne connexion à un noeud Infura.


*/
type Monitoring struct {
	Context *middleware.Context
	Handler MonitoringHandler
}

func (o *Monitoring) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewMonitoringParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, errors.New("Wrong params"))
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
